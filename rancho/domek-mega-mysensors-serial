/**
* The MySensors Arduino library handles the wireless radio link and protocol
* between your home built sensors/actuators and HA controller of choice.
* The sensors forms a self healing radio network with optional repeaters. Each
* repeater and gateway builds a routing tables in EEPROM which keeps track of the
* network topology allowing messages to be routed to nodes.
*
* Created by Henrik Ekblad <henrik.ekblad@mysensors.org>
* Copyright (C) 2013-2019 Sensnology AB
* Full contributor list: https://github.com/mysensors/MySensors/graphs/contributors
*
* Documentation: http://www.mysensors.org
* Support Forum: http://forum.mysensors.org
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* version 2 as published by the Free Software Foundation.
*
*******************************
*
* DESCRIPTION
* The ArduinoGateway prints data received from sensors on the serial link.
* The gateway accepts input on serial which will be sent out on radio network.
*
* The GW code is designed for Arduino Nano 328p / 16MHz
*
* Wire connections (OPTIONAL):
* - Inclusion button should be connected between digital pin 3 and GND
* - RX/TX/ERR leds need to be connected between +5V (anode) and digital pin 6/5/4 with resistor 270-330R in a series
*
* LEDs (OPTIONAL):
* - To use the feature, uncomment any of the MY_DEFAULT_xx_LED_PINs
* - RX (green) - blink fast on radio message received. In inclusion mode will blink fast only on presentation received
* - TX (yellow) - blink fast on radio message transmitted. In inclusion mode will blink slowly
* - ERR (red) - fast blink on error during transmission error or receive crc error
*
*/

// Enable debug prints to serial monitor
#define MY_DEBUG


// Enable and select radio type attached
// #define MY_RADIO_RF24
//#define MY_RADIO_NRF5_ESB
//#define MY_RADIO_RFM69
//#define MY_RADIO_RFM95

// Set LOW transmit power level as default, if you have an amplified NRF-module and
// power your radio separately with a good regulator you can turn up PA level.
// #define MY_RF24_PA_LEVEL RF24_PA_LOW

// Enable serial gateway
#define MY_GATEWAY_SERIAL

// Define a lower baud rate for Arduinos running on 8 MHz (Arduino Pro Mini 3.3V & SenseBender)
#if F_CPU == 8000000L
#define MY_BAUD_RATE 38400
#endif

// Enable inclusion mode
#define MY_INCLUSION_MODE_FEATURE
// Enable Inclusion mode button on gateway
//#define MY_INCLUSION_BUTTON_FEATURE

// Inverses behavior of inclusion button (if using external pullup)
//#define MY_INCLUSION_BUTTON_EXTERNAL_PULLUP

// Set inclusion mode duration (in seconds)
#define MY_INCLUSION_MODE_DURATION 60
// Digital pin used for inclusion mode button
//#define MY_INCLUSION_MODE_BUTTON_PIN  3

// Set blinking period
#define MY_DEFAULT_LED_BLINK_PERIOD 300

// Inverses the behavior of leds
//#define MY_WITH_LEDS_BLINKING_INVERSE

// Flash leds on rx/tx/err
// Uncomment to override default HW configurations
//#define MY_DEFAULT_ERR_LED_PIN 4  // Error led pin
//#define MY_DEFAULT_RX_LED_PIN  6  // Receive led pin
//#define MY_DEFAULT_TX_LED_PIN  5  // the PCB, on board LED

#include <MySensors.h>
#include <Adafruit_Sensor.h>
//#include <Adafruit_BME280.h>
#include <dht.h> //DHTlib


unsigned long currentMillis;
bool initialValueSent = false;
const long SENSORS_READ_FREQUENCY = 60000;
long lastSensorsReadMillis = -100000000;

const long SECURITY_SENSORS_READ_FREQUENCY = 300000;////
long lastSecuritySensorsReadMillis = -100000000;

const long MOTION_SENSORS_READ_FREQUENCY = 100000;/////
long lastMotionSensorsReadMillis = -100000000;

//------------- light sensors -----------------//
/*
5V - sensor1
sensor2 - 10kO - analogRead
10kO - GND
*/

//IDs starting with 0
#define H1_ID 0
#define H1_PIN 50
MyMessage msgH1(H1_ID, V_LIGHT_LEVEL);

// Enable repeater functionality for this node
#define MY_REPEATER_FEATURE

//------------- relays -----------------//
#define RELAY_ON 0  // GPIO value to write to turn on attached relay LOW LEVEL TRIGGER
#define RELAY_OFF 1 // GPIO value to write to turn off attached relay LOW LEVEL TRIGGER
#define HLT_RELAY_ON 1  // GPIO value to write to turn on attached relay HIGH LEVEL TRIGGER
#define HLT_RELAY_OFF 0 // GPIO value to write to turn off attached relay HIGH LEVEL TRIGGER
#define RELAY_5V_PIN 3

//IDs starting with 20
#define M6_ID 20
#define M6_PIN 42
MyMessage msgM6(M6_ID, V_STATUS);

#define M15_ID 21
#define M15_PIN 9
MyMessage msgM15(M15_ID, V_STATUS);

#define M8_ID 22
#define M8_PIN 12
MyMessage msgM8(M8_ID, V_STATUS);

#define M9_ID 23
#define M9_PIN 13
MyMessage msgM9(M9_ID, V_STATUS);

#define M16_ID 24
#define M16_PIN 10
MyMessage msgM16(M16_ID, V_STATUS);

#define M17_ID 25
#define M17_PIN 11
MyMessage msgM17(M17_ID, V_STATUS);

#define M18_ID 26
#define M18_PIN 30
MyMessage msgM18(M18_ID, V_STATUS);

#define M19_ID 27
#define M19_PIN 31
MyMessage msgM19(M19_ID, V_STATUS);

//------------- roller shutters -----------------//
//IDs starting with 10

long lastRollerShutterActionStart;
const long MAX_ROLLER_SHUTTER_OPERATION_DURATION = 25000;
boolean rollerShuttersInOperation = false;

#define M10_ID 10
#define M10_DOWN_PIN 5
#define M10_UP_PIN 4
MyMessage msgM10(M10_ID, V_STATUS);

#define M11_ID 11
#define M11_DOWN_PIN 58 //A4
#define M11_UP_PIN 57 //A3
MyMessage msgM11(M11_ID, V_STATUS);

#define M12_ID 12
#define M12_DOWN_PIN 55 //A1
#define M12_UP_PIN 56 //A2
MyMessage msgM12(M12_ID, V_STATUS);

#define M13_ID 13
#define M13_DOWN_PIN 59 //A5
#define M13_UP_PIN 60 //A6
MyMessage msgM13(M13_ID, V_STATUS);


//------------- temperature sensors -----------------//
//IDs starting with 30

//NTC floor temperature sensors
/*
5V - sensor1
sensor2 - 10kO - analogRead
10kO - GND
*/
#define NTC_NOMINAL_RESISTANCE 10000       //Nominal resistance at 25⁰C
#define NTC_NOMINAL_TEMPERATURE 25   // temperature for nominal resistance (almost always 25⁰ C)
#define NTC_SAMPLING_RATE 10
#define NTC_BETA 3950  // The beta coefficient or the B value of the thermistor (usually 3000-4000) check the datasheet for the accurate value.
#define NTC_REF_RESISTOR 10000   //Value of  resistor used for the voltage divider

#define FLOOR_HEATER_SAFE_TEMPERATURE_LIMIT 30.0
#define FLOOR_HEATER_SAFE_TEMPERATURE_COOLDOWN_TEMP 28.0
#define FLOOR_TEMPERATURE_SENSOR_MIN_VALID_VALUE 0.0
#define FLOOR_TEMPERATURE_SENSOR_MAX_VALID_VALUE 50.0

#define D1_ID 30
#define D1_PIN 69 //A15
MyMessage msgD1(D1_ID, V_TEMP);
boolean turnD1RelatedFloorHeaterOnAfterCooldown = false;

#define D3_ID 35
#define D3_PIN 68 //A14
MyMessage msgD3(D3_ID, V_TEMP);
boolean turnD3RelatedFloorHeaterOnAfterCooldown = false;


//DHT22 sensor setup
/*
1- > 5V
2 -> 10kO -5V - DATA
3 ->
4 -> GND
*/
dht D4_DHT22;
#define D4_ID 32
#define D4_PIN 63
MyMessage msgD4(D4_ID, V_TEMP);
int d4Status;

dht D2_DHT22;
#define D2_ID 33
#define D2_PIN 38
MyMessage msgD2(D2_ID, V_TEMP);
int d2Status;

dht D10_DHT22;
#define D10_ID 34
#define D10_PIN 39
MyMessage msgD10(D10_ID, V_TEMP);
int d10Status;

dht D6_DHT22;
#define D6_ID 36
#define D6_PIN 64
MyMessage msgD6(D6_ID, V_TEMP);
int d6Status;

dht D9_DHT22;
#define D9_ID 31
#define D9_PIN 8
MyMessage msgD9(D9_ID, V_TEMP);
int d9Status;


//------------- pressure sensors -----------------//
//IDs starting with 40
// #define N7_ID 40
// MyMessage msgN7(N7_ID, V_PRESSURE);



//------------- humidity sensors -----------------//
//IDs starting with 50
#define C7_ID 50
MyMessage msgC7(C7_ID, V_HUM);

#define C2_ID 51
MyMessage msgC2(C2_ID, V_HUM);

#define C1_ID 52
MyMessage msgC1(C1_ID, V_HUM);

#define C8_ID 53
MyMessage msgC8(C8_ID, V_HUM);

#define C9_ID 54
MyMessage msgC9(C9_ID, V_HUM);



//------------- contact sensors -----------------//
//IDs starting with 60
//sensor setup
/*
1- > GND
2 -> DATA
*/
#define G2_ID 60
#define G2_PIN 6
MyMessage msgG2(G2_ID, V_TRIPPED);
int g2State = -1;

#define G1_ID 61
#define G1_PIN 15
MyMessage msgG1(G1_ID, V_TRIPPED);
int g1State = -1;

#define G5_ID 62
#define G5_PIN 52 //// ex16
MyMessage msgG5(G5_ID, V_TRIPPED);
int g5State = -1;

#define G7_ID 63
#define G7_PIN 48
MyMessage msgG7(G7_ID, V_TRIPPED);
int g7State = -1;



//------------- water leak sensors -----------------//
//IDs starting with 80
//sensor setup
/*
1- > 5V
2 -> GND
4 -> ANALOG DATA
*/
int WATER_LEAK_THRESHOLD_VALUE = 500;

#define E2_ID 80
#define E2_PIN 47
MyMessage msgE2(E2_ID, V_TRIPPED);
int e2State = -1;

#define E1_ID 82
#define E1_PIN 44
MyMessage msgE1(E1_ID, V_TRIPPED);
int e1State = -1;

#define E3_ID 83
#define E3_PIN 51   ////// ex 14
MyMessage msgE3(E3_ID, V_TRIPPED);
int e3State = -1;


//------------- noise sensors -----------------//
//IDs starting with 90
//sensor setup
// !!!! make sure to calibrate the sensor !!!!
/*
2 -> GND
3 -> 5V
4 -> DATA
*/
#define F2_ID 90
#define F2_PIN 37
MyMessage msgF2(F2_ID, V_TRIPPED);
int f2State = -1;

#define F1_ID 91
#define F1_PIN 61
MyMessage msgF1(F1_ID, V_TRIPPED);
int f1State = -1;


//------------- motion sensors -----------------//
//IDs starting with 100
//sensor setup
// !!!! make sure to calibrate the sensor !!!!
#define I1_ID 100
#define I1_PIN 45
MyMessage msgI1(I1_ID, V_TRIPPED);
int i1State = -1;

#define I2_ID 101
#define I2_PIN 46
MyMessage msgI2(I2_ID, V_TRIPPED);
int i2State = -1;


//------------- smoke sensors -----------------//
//IDs starting with 110
#define J2_ID 110
#define J2_PIN 7




void presentation() {
    // Send the sketch version information to the gateway and Controller
  sendSketchInfo("Domek MEGA Serial", "1.0");

  // Register all sensors to gateway (they will be created as child devices)
  present(H1_ID, S_LIGHT_LEVEL, "H1");

  present(M10_ID, S_BINARY, "M10");
  present(M11_ID, S_BINARY, "M11");
  present(M12_ID, S_BINARY, "M12");
  present(M13_ID, S_BINARY, "M13");

  present(M6_ID, S_BINARY, "M6");
  present(M15_ID, S_BINARY, "M15");
  present(M8_ID, S_BINARY, "M8");
  present(M9_ID, S_BINARY, "M9");
  present(M16_ID, S_BINARY, "M16");
  present(M17_ID, S_BINARY, "M17");
  present(M18_ID, S_BINARY, "M18");
  present(M19_ID, S_BINARY, "M19");

  present(D1_ID, S_TEMP, "D1");
  present(D3_ID, S_TEMP, "D3");
  present(D9_ID, S_TEMP, "D9");
  present(D4_ID, S_TEMP, "D4");
  present(D2_ID, S_TEMP, "D2");
  present(D10_ID, S_TEMP, "D10");
  present(D6_ID, S_TEMP, "D6");

  // present(N7_ID, S_BARO, "N7");

  present(C7_ID, S_HUM, "C7");
  present(C2_ID, S_HUM, "C2");
  present(C1_ID, S_HUM, "C1");
  present(C8_ID, S_HUM, "C8");
  present(C9_ID, S_HUM, "C9");

  present(G2_ID, S_DOOR, "G2");
  present(G1_ID, S_DOOR, "G1");
  present(G5_ID, S_DOOR, "G5");
  present(G7_ID, S_DOOR, "G7");

  present(E2_ID, S_WATER_LEAK, "E2");
  present(E1_ID, S_WATER_LEAK, "E1");
  present(E3_ID, S_WATER_LEAK, "E3");

  present(F2_ID, S_SOUND, "F2");
  present(F1_ID, S_SOUND, "F1");

  present(I1_ID, S_MOTION, "I1");
  present(I2_ID, S_MOTION, "I2");
}

void before() {
  initializeRelays();
  pinMode(H1_PIN, INPUT);
  pinMode(D1_PIN, INPUT);
  pinMode(D3_PIN, INPUT);
  initializeDhtSensors();
  // initializeBme280Sensors();
  initializeContactSensors();
  initializeWaterLeakSensors();
  pinMode(F2_PIN, INPUT);
  pinMode(F1_PIN, INPUT);
  pinMode(I1_PIN, INPUT);
  pinMode(I2_PIN, INPUT);
}

void initializeRelays() {
  //first set the relays off to avoid roller shutters damage
  pinMode(RELAY_5V_PIN, OUTPUT);
  digitalWrite(RELAY_5V_PIN, LOW);

  pinMode(M10_DOWN_PIN, OUTPUT);
  pinMode(M10_UP_PIN, OUTPUT);
  pinMode(M11_DOWN_PIN, OUTPUT);
  pinMode(M11_UP_PIN, OUTPUT);
  pinMode(M12_DOWN_PIN, OUTPUT);
  pinMode(M12_UP_PIN, OUTPUT);
  pinMode(M13_DOWN_PIN, OUTPUT);
  pinMode(M13_UP_PIN, OUTPUT);
  switchOffAllRollerShutters();

  digitalWrite(M6_PIN, RELAY_OFF);
  pinMode(M6_PIN, OUTPUT);
  digitalWrite(M15_PIN, HLT_RELAY_OFF);
  pinMode(M15_PIN, OUTPUT);
  digitalWrite(M8_PIN, HLT_RELAY_ON);
  pinMode(M8_PIN, OUTPUT);
  digitalWrite(M9_PIN, HLT_RELAY_ON);
  pinMode(M9_PIN, OUTPUT);
  digitalWrite(M16_PIN, HLT_RELAY_OFF);
  pinMode(M16_PIN, OUTPUT);
  digitalWrite(M17_PIN, HLT_RELAY_OFF);
  pinMode(M17_PIN, OUTPUT);

  delay(10);
  digitalWrite(RELAY_5V_PIN, HIGH);
}

void switchOffAllRollerShutters() {
  rollerShuttersInOperation = false;
  digitalWrite(M10_DOWN_PIN, RELAY_OFF);
  digitalWrite(M10_UP_PIN, RELAY_OFF);
  digitalWrite(M11_DOWN_PIN, RELAY_OFF);
  digitalWrite(M11_UP_PIN, RELAY_OFF);
  digitalWrite(M12_DOWN_PIN, RELAY_OFF);
  digitalWrite(M12_UP_PIN, RELAY_OFF);
  digitalWrite(M13_DOWN_PIN, RELAY_OFF);
  digitalWrite(M13_UP_PIN, RELAY_OFF);
}

void initializeDhtSensors() {
  pinMode(D6_PIN, INPUT);
  pinMode(D9_PIN, INPUT);
  pinMode(D4_PIN, INPUT);
  pinMode(D2_PIN, INPUT);
  pinMode(D10_PIN, INPUT);
}

void initializeContactSensors() {
  pinMode(G2_PIN, INPUT);
  pinMode(G1_PIN, INPUT);
  pinMode(G5_PIN, INPUT);
  pinMode(G7_PIN, INPUT);
  // digitalWrite(G2_PIN, HIGH);
}

void initializeWaterLeakSensors() {
  pinMode(E2_PIN, INPUT);
  pinMode(E1_PIN, INPUT);
  pinMode(E3_PIN, INPUT);
}



void loop() {
  currentMillis = millis();
  if (!initialValueSent) {
    setInitialValuesFromController();
    initialValueSent = true;
  }
  if (rollerShuttersInOperation && currentMillis - lastRollerShutterActionStart > MAX_ROLLER_SHUTTER_OPERATION_DURATION) {
    switchOffAllRollerShutters();
  }
  if (currentMillis - lastSensorsReadMillis > SENSORS_READ_FREQUENCY) {
    lastSensorsReadMillis = currentMillis;
//    readLightSensors();
    readDHT22Sensors();
    readFloorTemperatureSensors();
//    readWaterLeakSensors();
  }
  if (currentMillis - lastSecuritySensorsReadMillis > SECURITY_SENSORS_READ_FREQUENCY) {
    lastSecuritySensorsReadMillis = currentMillis;
    readContactSensors();
    readNoiseSensors();
  }

   if (currentMillis - lastMotionSensorsReadMillis > MOTION_SENSORS_READ_FREQUENCY) {
    lastMotionSensorsReadMillis = currentMillis;
    readMotionSensors();
  }
}

void receive(const MyMessage &message) {
  Serial.println("Message received. Type: " + String(message.getType()) + ", device: " + String(message.getSensor()) + ", command: " + String(message.getCommand())
                + ", bool: " + String(message.getBool()));
  if (message.isAck()) {
     Serial.println("This is an ack from gateway");
  }
  if (message.type == V_STATUS) {
    Serial.println("Change relay state");
    if(message.getSensor() == M10_ID) {
      moveRollerShutter(message.getBool(), M10_DOWN_PIN, M10_UP_PIN, msgM10, "M10");
    } else if(message.getSensor() == M11_ID) {
      moveRollerShutter(message.getBool(), M11_DOWN_PIN, M11_UP_PIN, msgM11, "M11");
    } else if(message.getSensor() == M12_ID) {
      moveRollerShutter(message.getBool(), M12_DOWN_PIN, M12_UP_PIN, msgM12, "M12");
    } else if(message.getSensor() == M13_ID) {
      moveRollerShutter(message.getBool(), M13_DOWN_PIN, M13_UP_PIN, msgM13, "M13");
    } else if(message.getSensor() == M6_ID) {
      setRelayValue(message.getBool(), M6_PIN, msgM6, "M6");
      turnD1RelatedFloorHeaterOnAfterCooldown = message.getBool();
    } else if(message.getSensor() == M15_ID) {
      setRelayValueHlt(message.getBool(), M15_PIN, msgM15, "M15");
      turnD3RelatedFloorHeaterOnAfterCooldown = message.getBool();
    } else if(message.getSensor() == M8_ID) {
    setRelayValueHlt(message.getBool(), M8_PIN, msgM8, "M8");
    } else if(message.getSensor() == M9_ID) {
    setRelayValueHlt(message.getBool(), M9_PIN, msgM9, "M9");
    } else if(message.getSensor() == M16_ID) {
    setRelayValueHlt(message.getBool(), M16_PIN, msgM16, "M16");
    } else if(message.getSensor() == M17_ID) {
    setRelayValueHlt(message.getBool(), M17_PIN, msgM17, "M17");
    } else if(message.getSensor() == M18_ID) {
    setRelayValue(message.getBool(), M18_PIN, msgM18, "M18");
    } else if(message.getSensor() == M19_ID) {
    setRelayValue(message.getBool(), M19_PIN, msgM19, "M19");
    } else {
      Serial.println("Unknown device: " + message.getSensor());
    }
  }
}

void moveRollerShutter(boolean state, int pinDown, int pinUp, MyMessage &msg, String device) {
  Serial.println("Moving " + device + " shutter " + state?"UP":"DOWN");
  lastRollerShutterActionStart = currentMillis;
  rollerShuttersInOperation = true;
  if (state) {
    digitalWrite(pinDown, RELAY_OFF);
    delay(10);
    digitalWrite(pinUp, RELAY_ON);
    send(msg.set(1));
  } else {
    digitalWrite(pinUp, RELAY_OFF);
    delay(10);
    digitalWrite(pinDown, RELAY_ON);
    send(msg.set(0));
  }
}

void setRelayValueHlt(boolean state, int pin, MyMessage &msg, String device) {
  Serial.println("Setting " + device + " relay " + state?"ON":"OFF");
  if (state) {
    digitalWrite(pin, HLT_RELAY_ON);
    send(msg.set(1));
  } else {
    digitalWrite(pin, HLT_RELAY_OFF);
    send(msg.set(0));
  }
}

void setRelayValue(boolean state, int pin, MyMessage &msg, String device) {
  Serial.println("Setting " + device + " relay " + state?"ON":"OFF");
  if (state) {
    digitalWrite(pin, RELAY_ON);
    send(msg.set(1));
  } else {
    digitalWrite(pin, RELAY_OFF);
    send(msg.set(0));
  }
}

void setInitialValuesFromController() {
  Serial.println("Setting initial values from controller");
  setInitialRelayValue(M10_ID, msgM10);
  setInitialRelayValue(M11_ID, msgM11);
  setInitialRelayValue(M12_ID, msgM12);
  setInitialRelayValue(M13_ID, msgM13);

  setInitialRelayValue(M6_ID, msgM6);
  setInitialRelayValue(M15_ID, msgM15);
  setInitialRelayValue(M8_ID, msgM8);
  setInitialRelayValue(M9_ID, msgM9);
  setInitialRelayValue(M16_ID, msgM16);
  setInitialRelayValue(M17_ID, msgM17);

  wait(2000, C_SET, V_STATUS);
}

/**
  get initial value from serial controller and set it
*/
void setInitialRelayValue(int ID, MyMessage &msg) {
  boolean state = request(ID, V_STATUS);
  if (state) {
    send(msg.set(1));
  } else {
    send(msg.set(0));
  }
}

void readLightSensors() {
  Serial.println("Reading light sensors values");
  sendValidSensorFloatValue(analogRead(H1_PIN)/10.23, msgH1, "H1");
}

void readDHT22Sensors() {
  Serial.println("========= Reading DHT22 temperature and humidity sensors values =========");
  D9_DHT22.read22(D9_PIN);
  delay(50);
  sendValidSensorFloatValue(D9_DHT22.temperature, msgD9, "D9");
  sendValidSensorFloatValue(D9_DHT22.humidity, msgC7, "C7");

  d4Status = readDHT22Sensor(D4_DHT22, D4_PIN, msgD4, "D4", msgC2, "C2", d4Status);
  d2Status = readDHT22Sensor(D2_DHT22, D2_PIN, msgD2, "D2", msgC1, "C1", d2Status);
  d10Status = readDHT22Sensor(D10_DHT22, D10_PIN, msgD10, "D10", msgC8, "C8", d10Status);
  d6Status = readDHT22Sensor(D6_DHT22, D6_PIN, msgD6, "D6", msgC9, "C9", d6Status);
  d9Status = readDHT22Sensor(D9_DHT22, D9_PIN, msgD9, "D9", msgC7, "C7", d9Status);
}

/**
  DHT22 sensors need some time to gather read-outs, that's why we command it to read current values but return previous values.
  If the sensor returns 0.0 temp and 0.0 humidity it means that no read command was sent yet to it, so send it but don't return anything.
  returns DHT22 sensor status
*/
int readDHT22Sensor(dht &DHT22, int pin, MyMessage &msgTemp, String deviceTemp, MyMessage &msgHum, String deviceHum, int status) {
  Serial.println("---------------");
  Serial.println("Previous DHT22 temperature " + deviceTemp + ": " + DHT22.temperature + " and humidity " + deviceHum + ": " + DHT22.humidity + " sensors values");
  if (status != DHTLIB_OK) {
    String statusString = getDhtErrorStatus(status);
    Serial.println(deviceTemp + " status invalid: " + statusString);
    send(msgTemp.set(statusString.c_str()));
    send(msgHum.set(statusString.c_str()));
  } else {
    if (DHT22.temperature<1.0 && DHT22.humidity<1.0) {
      Serial.println("No sensor values read yet");
    } else {
      sendValidSensorFloatValue(DHT22.temperature, msgTemp, deviceTemp);
      sendValidSensorFloatValue(DHT22.humidity, msgHum, deviceHum);
    }
  }
  Serial.println("Reading new DHT22 temperature " + deviceTemp + " and humidity " + deviceHum + " sensors values");
  Serial.println("---------------");
  return DHT22.read22(pin);
}

void sendValidSensorFloatValue(float value, MyMessage &msg, String device) {
  Serial.println("Sending " + device + " sensor value: " + value);
  send(msg.set(value,1));
}

void sendValidSensorBooleanValue(boolean value, MyMessage &msg, String device) {
  Serial.println("Sending " + device + " sensor value: " + value);
  send(msg.set(value));
}

String getDhtErrorStatus(int statusCode) {
  String status;
  switch (d4Status) {
     case DHTLIB_ERROR_CHECKSUM:
      status = "DHTLIB_ERROR_CHECKSUM";
      break;
    case DHTLIB_ERROR_TIMEOUT:
      status = "DHTLIB_ERROR_TIMEOUT";
      break;
    default:
      status = "UNKNOWN_ERROR";
      break;
  }
  return status;
}


void readFloorTemperatureSensors() {
  Serial.println("Reading NTC floor temperature sensors values");
  uint8_t i;
  float d1Average = 0;
  int d1ReadsSum = 0;
  float d3Average = 0;
  int d3ReadsSum = 0;
  for (i = 0; i < NTC_SAMPLING_RATE; i++) {
    int d1Value = analogRead(D1_PIN);
    Serial.print("D1 value read number ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(d1Value);
    d1ReadsSum += d1Value;

    int d3Value = analogRead(D3_PIN);
    Serial.print("D3 value read number ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(d3Value);
    d3ReadsSum += d3Value;
    delay(20);
  }
  float d1Temperature = getNtcResistorTemperatureFromReadsSum(d1ReadsSum);
  float d3Temperature = getNtcResistorTemperatureFromReadsSum(d3ReadsSum);
  sendNtcSensorValue(d1Temperature, msgD1, "D1");
  sendNtcSensorValue(d3Temperature, msgD3, "D3");

  if (turnD1RelatedFloorHeaterOnAfterCooldown) turnOnFloorHeaterIfNeeded(d1Temperature, M6_PIN, "M6");
  if (turnD3RelatedFloorHeaterOnAfterCooldown) turnOnFloorHeaterIfNeeded(d3Temperature, M15_PIN, "M15");

  safetyCheckForFloorHeater(d1Temperature, M6_PIN, msgM6, "M6");
  safetyCheckForFloorHeater(d3Temperature, M15_PIN, msgM15, "M15");
}

/**
  Calculate average temperature value from NTC sensor reads
*/
float getNtcResistorTemperatureFromReadsSum(int readsSum) {
  float average = 0;
  average = readsSum / NTC_SAMPLING_RATE;
  average = 1023 / average - 1;
  average = NTC_REF_RESISTOR / average;
  Serial.print("NTC Thermistor resistance ");
  Serial.println(average);
  float temperature;
  temperature = average / NTC_NOMINAL_RESISTANCE;     // (R/Ro)
  temperature = log(temperature);                  // ln(R/Ro)
  temperature /= NTC_BETA;                   // 1/B * ln(R/Ro)
  temperature += 1.0 / (NTC_NOMINAL_TEMPERATURE + 273.15); // + (1/To)
  temperature = 1.0 / temperature;                 // Invert
  temperature -= 273.15;                         // convert absolute temp to C
  Serial.print("NTC Temperature ");
  Serial.print(temperature);
  Serial.println(" °C");
  return temperature;
}

/**
  Check if NTC sensor value is above the safety threshold and turn off the related floor heater
*/
void safetyCheckForFloorHeater(float temperature, int floorHeaterPin, MyMessage &floorHeaterMsg, String floorHeaterDevice) {
  if (temperature > FLOOR_HEATER_SAFE_TEMPERATURE_LIMIT) {
    Serial.println("DISABLED!!! Switching off floor heater " + floorHeaterDevice + ". NTC sensor shows safety temperature reached: " + temperature);
//    setRelayValue(false, floorHeaterPin, floorHeaterMsg, floorHeaterDevice);
  }
}

/**
  Check if NTC sensor value is reliable and below the cooldown temp threshold and turn on the related floor heater if requested
*/
void turnOnFloorHeaterIfNeeded(float temperature, int floorHeaterPin, String floorHeaterDevice) {
  if (temperature > FLOOR_TEMPERATURE_SENSOR_MIN_VALID_VALUE && temperature < FLOOR_HEATER_SAFE_TEMPERATURE_COOLDOWN_TEMP) {
    Serial.println("DISABLED!!! Switching on floor heater " + floorHeaterDevice + ". NTC sensor shows safety temperature fell below " + FLOOR_HEATER_SAFE_TEMPERATURE_COOLDOWN_TEMP);
//    digitalWrite(floorHeaterPin, RELAY_ON);
  }
}

/**
  Send the NTC sensor value, check if it is reliable first
*/
void sendNtcSensorValue(float value, MyMessage &msg, String device) {
  Serial.println(device + " NTC sensor value: " + value);
  if (value < FLOOR_TEMPERATURE_SENSOR_MIN_VALID_VALUE || value > FLOOR_TEMPERATURE_SENSOR_MAX_VALID_VALUE) {
    Serial.println(device + " NTC sensor is unreliable");
    send(msg.set("N/A"));
  } else {
    sendValidSensorFloatValue(value, msg, device);
  }
}

void readContactSensors() {
  Serial.println("Reading contact sensors");
  g2State = readBinarySensor(g2State, G2_PIN, msgG2, "G2");
  g1State = readBinarySensor(g1State, G1_PIN, msgG1, "G1");
  g5State = readBinarySensor(g5State, G5_PIN, msgG5, "G5");
  g7State = readBinarySensor(g7State, G7_PIN, msgG7, "G7");
  // int g2CurrentState = digitalRead(G2_PIN);TODO: digitalRead czy analogRead??
  // if (g2CurrentState != g2State) {
  //   sendValidSensorValue((g2CurrentState==HIGH ? "1" : "0"), msgG2, "G2");
  //   g2State = g2CurrentState;
  // }
}



void readNoiseSensors() {
  Serial.println("Reading noise sensors");
  int f2NoisySounds = 0;
  int f1NoisySounds = 0;
  for (int i=1; i<5; i++) {
    if (digitalRead(F2_PIN)) f2NoisySounds++;
    if (digitalRead(F1_PIN)) f1NoisySounds++;
    delay(10);
  }
  boolean f2CurrentState = f2NoisySounds > 3;
  if (f2CurrentState != f2State) {
    sendValidSensorBooleanValue(f2CurrentState==HIGH, msgF2, "F2");
    f2State = f2CurrentState;
  }
  boolean f1CurrentState = f1NoisySounds > 3;
  if (f1CurrentState != f1State) {
    sendValidSensorBooleanValue(f1CurrentState==HIGH, msgF1, "F1");
    f1State = f1CurrentState;
  }
}

void readWaterLeakSensors() {
  Serial.println("Reading water leak sensors");
  e2State = readBinarySensor(e2State, E2_PIN, msgE2, "E2");
  e1State = readBinarySensor(e1State, E1_PIN, msgE1, "E1");
  e3State = readBinarySensor(e3State, E3_PIN, msgE3, "E3");
}

int readBinarySensor(int previousState, int pin, MyMessage &msg, String device) {
  int currentState = analogRead(pin);
  if (currentState != previousState) {
    sendValidSensorBooleanValue(currentState==HIGH, msg, device);
  }
  return currentState;
}

void readMotionSensors() {
  Serial.println("Reading motion sensors");
  i1State = readBinarySensor(i1State, I1_PIN, msgI1, "I1");
  i2State = readBinarySensor(i2State, I2_PIN, msgI2, "I2");
  // int i1CurrentState = digitalRead(I1_PIN); digitalRead czy analogRead??
  // if (i1CurrentState != i1State) {
  //   sendValidSensorValue((i1CurrentState==HIGH ? "1" : "0"), msgI1, "I1");
  //   i1State = i1CurrentState;
  // }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// //BME280 sensor setup
// /*
// SCK -> SCL (21)
// SDA -> SDA (20)
// */
// #define ALTITUDE 0

// #define D9_ID 31
// Adafruit_BME280 D9_bme; // I2C
// MyMessage msgD9(D9_ID, V_TEMP);
// boolean d9Status;

// void initializeBme280Sensors() {
//   d9Status = D9_bme.begin(0x76);  //The I2C address of the sensor I use is 0x76
//   if (!d9Status) {
//       handleInvalidD9Status();
//   }
// }

// void readBme280TemperatureSensors() {
//   if (!d9Status) {
//     initializeBme280Sensors();
//   } else {
//     sendValidSensorValue(String(D9_bme.readTemperature(), 1), msgD9, "D9");
//   }
// }

// void readPressureSensors() {
//   Serial.println("Reading pressure sensors values");
//   readBme280PressureSensors();
// }

// void readBme280PressureSensors() {
//   if (!d9Status) {
//     return;
//   }
//   float n7Pressure = D9_bme.readPressure();
//   n7Pressure = D9_bme.seaLevelForAltitude(ALTITUDE, n7Pressure);
//   n7Pressure = n7Pressure/100.0F;
//   sendValidSensorValue(String(n7Pressure,2), msgN7, "N7");
// }

// void readBme280HumiditySensors() {
//   if (!d9Status) {
//     return;
//   }
//   sendValidSensorValue(String(D9_bme.readHumidity(), 0), msgC7, "C7");
// }
